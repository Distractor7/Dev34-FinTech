rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
             (request.auth.token.role == 'admin' || 
              request.auth.token.isAdmin == true ||
              // Development: any authenticated user is admin
              // Production: remove this line and set up proper admin claims
              true);
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // INVOICES COLLECTION - SECURE RULES
    match /invoices/{invoiceId} {
      // Admin has full access to all invoices
      allow read, write: if isAdmin();
      
      // Non-admin users: limited access based on property ownership
      allow read: if isAuthenticated() && (
        // Property owners/managers can read their invoices
        resource.data.propertyId in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.propertyIds ||
        // Service providers can read their own invoices
        resource.data.providerId == request.auth.uid ||
        // Users with access to the property
        resource.data.propertyId in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.accessiblePropertyIds
      );
      
      allow create: if isAuthenticated() && (
        // Property owners can create invoices for their properties
        request.resource.data.propertyId in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.propertyIds ||
        // Service providers can create invoices for properties they service
        request.resource.data.providerId == request.auth.uid
      );
      
      allow update: if isAuthenticated() && (
        // Property owners can update invoices for their properties
        resource.data.propertyId in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.propertyIds ||
        // Service providers can update their own invoices
        resource.data.providerId == request.auth.uid
      );
      
      // Delete: Only admins can delete
      allow delete: if isAdmin();
    }

    // Service Providers Collection
    match /serviceProviders/{providerId} {
      // Admin has full access
      allow read, write: if isAdmin();
      // Non-admin users: read-only
      allow read: if isAuthenticated();
    }

    // Properties Collection
    match /properties/{propertyId} {
      // Admin has full access
      allow read, write: if isAdmin();
      // Non-admin users: read-only
      allow read: if isAuthenticated();
    }

    // Financial Data Collection
    match /financialData/{docId} {
      // Admin has full access
      allow read, write: if isAdmin();
      // Non-admin users: read-only
      allow read: if isAuthenticated();
    }

    // User Profiles Collection
    match /users/{userId} {
      // Admin has full access to all user profiles
      allow read, write: if isAdmin();
      // Users can manage their own profile
      allow read: if isOwner(userId);
      allow create: if isOwner(userId) || 
                   (isAuthenticated() && 
                    request.auth.uid == userId && 
                    request.resource.data.uid == userId);
      allow update: if isOwner(userId);
      // Only admins can delete users
      allow delete: if isAdmin();
    }

    // Audit Logs Collection
    match /auditLogs/{logId} {
      allow read: if isAdmin();
      allow create: if isAuthenticated();
      allow update, delete: if false;
    }

    // API Keys Collection
    match /apiKeys/{keyId} {
      allow read: if isAuthenticated() && 
                   (resource.data.userId == request.auth.uid || isAdmin());
      allow create: if isAuthenticated() && 
                   resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() && 
                   resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() && 
                   resource.data.userId == request.auth.uid;
    }

    // Service Requests Collection
    match /serviceRequests/{requestId} {
      allow read: if isAuthenticated() && 
                   (resource.data.propertyId in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.propertyIds ||
                    resource.data.providerId in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.providerIds ||
                    isAdmin());
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && 
                   (resource.data.propertyId in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.propertyIds ||
                    resource.data.providerId in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.providerIds ||
                    isAdmin());
      allow delete: if isAdmin();
    }

    // Default deny all
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
